# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  schedule:
    - cron: '0 2 * * *'
  # Triggers the workflow on push or pull request events but only for the "main" branch
  # push:
  #   branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  ARM_TOOLCHAIN_32: arm-none-linux-gnueabihf
  ARM_TOOLCHAIN_64: aarch64-none-linux-gnu
  TOOLCHAIN_VER: 12.3.rel1
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    strategy:
        matrix:
          os: [ubuntu-22.04,ubuntu-24.04,self-hosted,ubuntu-24.04-arm,ubuntu-22.04-arm] #self-hosted
        fail-fast: false
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: 🖥️ 检查服务器配置
        run: |
          echo "--------------------------CPU信息--------------------------"
          echo "CPU物理数量:$(lscpu -p | awk -F, '/^[^#]/ {print $2}' | sort -u | wc -l)"
          echo -e "CPU核心及版本信息:$(cat /proc/cpuinfo | grep 'model name' | cut -f2 -d: | uniq -c)"
          echo "--------------------------内存信息--------------------------"
          echo "已安装内存详细信息："
          sudo lshw -short -C memory | grep GiB
          echo -e "\n"
          echo "--------------------------硬盘信息--------------------------"
          echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
          echo "硬盘详情："
          df -Th
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: 📥 Checkout
        uses: actions/checkout@v4

      - name: 🔎 get IP info
        if: matrix.os != 'self-hosted'
        run: |
            echo "--------------------------private git info--------------------------"
            curl ipinfo.io/$(host gitee.com | awk '/has address/ { print $4; exit }')
            echo "--------------------------local info--------------------------"
            curl ipinfo.io

      - name: 🔑 Setup SSH
        uses: MrSquaare/ssh-setup-action@v3
        with:
          host: gitee.com
          private-key: ${{ secrets.UDP_GW }}

      - name: 📂 Checkout private tools
        run: |
          git clone git@gitee.com:hstarlive/XPlaneUDP.git --depth=1

      - name: 🛠️ Install latest stable
        uses: dtolnay/rust-toolchain@master
        with:
            toolchain: stable
            target: aarch64-unknown-linux-gnu, armv7-unknown-linux-gnueabihf, x86_64-pc-windows-msvc
            components: rustfmt, clippy
      - name: 🗂️ rust-cache
        uses:  Swatinem/rust-cache@v2
        with:
          prefix-key: ${{ matrix.os }}
          workspaces: "XPlaneUDP -> target"

      - name: 📦 install cargo-xwin
        uses: actions-rs/cargo@v1
        with:
            command: install 
            args: --locked cargo-xwin
      - name: 📦 install cargo-make
        uses: actions-rs/cargo@v1
        with:
          command: install 
          args: cargo-make

      - name: 🛠️ get arm-gnu-toolchain
        if: runner.arch == 'X64'
        uses: xin5683/armgcc@main
        with:
          target: 'arm-none-linux-gnueabihf,aarch64-none-linux-gnu'
          version: ${{ env.TOOLCHAIN_VER }}

      - name: 🛠️ get arm-gnu-toolchain ARM64
        if: runner.arch == 'ARM64' && matrix.os != 'self-hosted'
        run: |
            sudo -E apt-get update
            sudo -E apt-get -y install gcc-aarch64-linux-gnu gcc-arm-linux-gnueabihf
        # run: |
        #   wget -O ${{ github.workspace }}arm-none-linux-gnueabihf.tar.xz https://developer.arm.com/-/media/Files/downloads/gnu/$TOOLCHAIN_VER/binrel/arm-gnu-toolchain-$TOOLCHAIN_VER-x86_64-arm-none-linux-gnueabihf.tar.xz
        #   mkdir -p ${{ github.workspace }}arm-none-linux-gnueabihf
        #   tar -vxf ${{ github.workspace }}arm-none-linux-gnueabihf.tar.xz -C ${{ github.workspace }}arm-none-linux-gnueabihf --strip-components 1
        #   ln -s ${{ github.workspace }}arm-none-linux-gnueabihf/bin/arm-none-linux-gnueabihf-gcc ${{ github.workspace }}arm-none-linux-gnueabihf/bin/arm-linux-gnueabihf-gcc
        #   wget -O ${{ github.workspace }}aarch64-none-linux-gnu.tar.xz https://developer.arm.com/-/media/Files/downloads/gnu/$TOOLCHAIN_VER/binrel/arm-gnu-toolchain-$TOOLCHAIN_VER-x86_64-aarch64-none-linux-gnu.tar.xz
        #   mkdir -p ${{ github.workspace }}aarch64-none-linux-gnu
        #   tar -vxf ${{ github.workspace }}aarch64-none-linux-gnu.tar.xz -C ${{ github.workspace }}aarch64-none-linux-gnu --strip-components 1
        #   ln -s ${{ github.workspace }}aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-gcc ${{ github.workspace }}aarch64-none-linux-gnu/bin/aarch64-linux-gnu-gcc
        #   echo "${{ github.workspace }}aarch64-none-linux-gnu/bin" >> "$GITHUB_PATH"
        #   echo "${{ github.workspace }}arm-none-linux-gnueabihf/bin" >> "$GITHUB_PATH"
        #   echo test, and deploy your project.          

      # Runs a set of commands using the runners shell
      - name: 🏗️ build
        
        uses: nick-fields/retry@v3
        with:
            timeout_minutes: 60
            max_attempts: 3
            command: |
                cd XPlaneUDP
                rustup update
                cargo update
                cargo make -p production all
            new_command_on_retry: cd XPlaneUDP;cargo make -p production all
      - name: 🕒 Get timestamp
        id: timestamp
        run: |
          (export TZ='Asia/Shanghai'; echo "timestamp=$(date +'%Y%m%d_%H%M')" >> $GITHUB_OUTPUT)
      - name: 📤 Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: XPlaneUDP-${{ steps.timestamp.outputs.timestamp }}-${{ matrix.os }}
          path: XPlaneUDP/target/*.gz

      - name: setup python
        uses: actions/setup-python@v5
        with:
            python-version: '3.12'

      - name: generate web page
        run: |
          mkdir -p public && cp XPlaneUDP/target/*.tar.gz ./public/ && python generate_files.py public/ -o public/

      - name: Setup NodeJS
        uses: actions/setup-node@v4
        with:
            node-version: 20
      
      - name: Install Netlify
        run: npm install netlify-cli -g

      - name: Deploy to Netlify
        if: matrix.os == 'self-hosted'
        run: |
            netlify deploy \
            --dir public \
            --prod \
            --site ${{ secrets.NETLIFY_SITE_ID }} \
            --auth ${{ secrets.NETLIFY_API_TOKEN }} \

      # - name: Release
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     files: XPlaneUDP/target/*.gz
      #     tag_name: test
      #     name: ${{ steps.date.outputs.date }}